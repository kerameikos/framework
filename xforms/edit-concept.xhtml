<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
	xmlns:res="http://www.w3.org/2005/sparql-results#" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:crm="http://www.cidoc-crm.org/cidoc-crm/"
	xmlns:dcterms="http://purl.org/dc/terms/" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:kid="http://kerameikos.org/id/"
	xmlns:kon="http://kerameikos.org/ontology#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:prov="http://www.w3.org/ns/prov#"
	xmlns:un="http://www.owl-ontologies.com/Ontology1181490123.owl#" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:org="http://www.w3.org/ns/org#"
	xmlns:osgeo="http://data.ordnancesurvey.co.uk/ontology/geometry/" xmlns:kerameikos="https://github.com/kerameikos/"
	xmlns:ontolex="http://www.w3.org/ns/lemon/ontolex#" xmlns:lexinfo="http://www.lexinfo.net/ontology/2.0/lexinfo#"
	xmlns:edm="http://www.europeana.eu/schemas/edm/" xmlns:crmgeo="http://www.ics.forth.gr/isl/CRMgeo/">
	<head>
		<title>Kerameikos: LOD Editor</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />
		<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" />
		<script type="text/javascript" src="http://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" href="/apps/kerameikos/xforms/css/style.css" />

		<!-- mapping -->
		<!--<script type="text/javascript" src="http://www.openlayers.org/api/OpenLayers.js"></script>
		<script type="text/javascript" src="http://maps.google.com/maps/api/js?v=3.9&amp;sensor=false"></script>
		<script type="text/javascript" src="/apps/kerameikos/xforms/javascript/georeference.js"></script>-->

		<xforms:model>
			<xforms:instance id="doc" xxforms:exclude-result-prefixes="#default xhtml xforms xs ev xxforms fr res xi kerameikos atom">
				<rdf:RDF xmlns="" xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
					xmlns:prov="http://www.w3.org/ns/prov#" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:crm="http://www.cidoc-crm.org/cidoc-crm/"
					xmlns:crmgeo="http://www.ics.forth.gr/isl/CRMgeo/" xmlns:edm="http://www.europeana.eu/schemas/edm/"
					xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:dcterms="http://purl.org/dc/terms/"
					xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" xmlns:kid="http://kerameikos.org/id/"
					xmlns:kon="http://kerameikos.org/ontology#" xmlns:org="http://www.w3.org/ns/org#"
					xmlns:un="http://www.owl-ontologies.com/Ontology1181490123.owl#" xmlns:osgeo="http://data.ordnancesurvey.co.uk/ontology/geometry/"
					xmlns:ontolex="http://www.w3.org/ns/lemon/ontolex#" xmlns:lexinfo="http://www.lexinfo.net/ontology/2.0/lexinfo#"/>
			</xforms:instance>

			<xforms:instance id="config" xxforms:exclude-result-prefixes="#all">
				<xi:include href="../config.xml"/>
			</xforms:instance>

			<xforms:instance id="control-instance">
				<controls xmlns="">
					<id></id>
					<uri></uri>
					<idValid>false</idValid>
					<new-id>true</new-id>
					<username></username>
					<load-error>false</load-error>
					<save-trigger>false</save-trigger>
					<delete-trigger></delete-trigger>
					<delete-success></delete-success>
					<status></status>
					<type></type>
					<conceptScheme></conceptScheme>
					<conceptScheme_uri></conceptScheme_uri>
					<atom-type></atom-type>
					<atom-search></atom-search>
					<atom-id></atom-id>
					<atom-summary></atom-summary>
					<dump></dump>
					<membership-position></membership-position>
					<content_before_hash></content_before_hash>
					<content_after_hash></content_after_hash>
					<session-id></session-id>
					<geo>
						<type></type>
						<hasFeature></hasFeature>
						<lat></lat>
						<long></long>
						<geoJSON></geoJSON>
					</geo>
				</controls>
			</xforms:instance>

			<xforms:instance id="load-config">
				<config xmlns="">
					<url></url>
					<content-type>application/xml</content-type>
					<mode>xml</mode>
				</config>
			</xforms:instance>

			<xforms:instance id="save-config">
				<config xmlns="">
					<url></url>
					<content-type>application/xml</content-type>
					<make-directories>false</make-directories>
					<append>false</append>
				</config>
			</xforms:instance>

			<xforms:instance id="delete-config">
				<config xmlns="">
					<delete>
						<url></url>
					</delete>
				</config>
			</xforms:instance>

			<xforms:instance id="dump">
				<dump xmlns=""></dump>
			</xforms:instance>

			<!-- REST responses -->
			<!-- local atom feed -->
			<xforms:instance id="feed">
				<feed xmlns=""></feed>
			</xforms:instance>

			<!-- itemsets -->
			<xforms:instance id="languages">
				<xi:include href="instances/languages.xml"/>
			</xforms:instance>

			<xforms:instance id="classes">
				<classes xmlns="">
					<class>
						<label>Collection</label>
						<type>crm:E78_Collection</type>
					</class>
					<class>
						<label>Group (loose classification)</label>
						<type>foaf:Group</type>
					</class>
					<class>
						<label>Institution</label>
						<type>crm:E40_Legal_Body</type>
					</class>
					<class>
						<label>Material</label>
						<type>crm:E57_Material</type>
					</class>
					<class>
						<label>Organization (Formal)</label>
						<type>foaf:Organization</type>
					</class>
					<class>
						<label>Period</label>
						<type>crm:E4_Period</type>
					</class>
					<class>
						<label>Person</label>
						<type>foaf:Person</type>
					</class>
					<class>
						<label>Production Place</label>
						<type>crm:E53_Place</type>
					</class>
					<class>
						<label>Role</label>
						<type>org:Role</type>
					</class>
					<class>
						<label>Shape</label>
						<type>kon:Shape</type>
					</class>
					<class>
						<label>Style</label>
						<type>kon:Style</type>
					</class>
					<class>
						<label>Technique</label>
						<type>kon:Technique</type>
					</class>
					<!--<class>
						<label>Ware</label>
						<type>kon:Ware</type>
					</class>-->
				</classes>
			</xforms:instance>


			<!-- RDF elements -->
			<!-- properties -->
			<xforms:instance id="prefLabel-template" xxforms:exclude-result-prefixes="#all">
				<skos:prefLabel xml:lang=""/>
			</xforms:instance>

			<xforms:instance id="altLabel-template" xxforms:exclude-result-prefixes="#all">
				<skos:altLabel xml:lang=""/>
			</xforms:instance>

			<xforms:instance id="definition-template" xxforms:exclude-result-prefixes="#all">
				<skos:definition xml:lang=""/>
			</xforms:instance>

			<xforms:instance id="scopeNote-template" xxforms:exclude-result-prefixes="#all">
				<skos:scopeNote xml:lang=""/>
			</xforms:instance>

			<xforms:instance id="relatedMatch-template" xxforms:exclude-result-prefixes="#all">
				<skos:relatedMatch rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="related-template" xxforms:exclude-result-prefixes="#all">
				<skos:related rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="exactMatch-template" xxforms:exclude-result-prefixes="#all">
				<skos:exactMatch rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="isPartOf-template" xxforms:exclude-result-prefixes="#all">
				<dcterms:isPartOf rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="source-template" xxforms:exclude-result-prefixes="#all">
				<dcterms:source rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="startDate-template" xxforms:exclude-result-prefixes="#all">
				<edm:begin rdf:datatype="http://www.w3.org/2001/XMLSchema#gYear"/>
			</xforms:instance>

			<xforms:instance id="endDate-template" xxforms:exclude-result-prefixes="#all">
				<edm:end rdf:datatype="http://www.w3.org/2001/XMLSchema#gYear"/>
			</xforms:instance>

			<xforms:instance id="lat-template" xxforms:exclude-result-prefixes="#all">
				<geo:lat rdf:datatype="http://www.w3.org/2001/XMLSchema#decimal"/>
			</xforms:instance>

			<xforms:instance id="long-template" xxforms:exclude-result-prefixes="#all">
				<geo:long rdf:datatype="http://www.w3.org/2001/XMLSchema#decimal"/>
			</xforms:instance>

			<xforms:instance id="asGeoJSON-template" xxforms:exclude-result-prefixes="#all">
				<osgeo:asGeoJSON/>
			</xforms:instance>

			<xforms:instance id="seeAlso-template" xxforms:exclude-result-prefixes="#all">
				<rdfs:seeAlso rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="thumbnail-template" xxforms:exclude-result-prefixes="#all">
				<foaf:thumbnail rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="hasUncertainty-template" xxforms:exclude-result-prefixes="#all">
				<un:hasUncertainty rdf:resource=""/>
			</xforms:instance>

			<!-- provenance -->
			<xforms:instance id="changeNote-template" xxforms:exclude-result-prefixes="#all">
				<skos:changeNote rdf:resource=""/>
			</xforms:instance>

			<xforms:instance id="provenance-template" xxforms:exclude-result-prefixes="#all">
				<dcterms:ProvenanceStatement rdf:about="">
					<foaf:topic rdf:resource=""/>
				</dcterms:ProvenanceStatement>
			</xforms:instance>

			<xforms:instance id="activity-template" xxforms:exclude-result-prefixes="#all">
				<prov:Activity>
					<prov:atTime rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime"/>
					<prov:wasAssociatedWith rdf:resource=""/>
					<dcterms:type/>
				</prov:Activity>
			</xforms:instance>

			<xforms:instance id="description-template" xxforms:exclude-result-prefixes="#all">
				<dcterms:description xml:lang="en"/>
			</xforms:instance>

			<!-- ***** SPARQL Update ***** -->
			<xforms:instance id="sparqlUpdate-template">
				<query>
					<![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX geo:	<http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX kon:	<http://kerameikos.org/ontology#>
PREFIX ontolex:	<http://www.w3.org/ns/lemon/ontolex#>
PREFIX org:	<http://www.w3.org/ns/org#>
PREFIX prov:	<http://www.w3.org/ns/prov#>
PREFIX skos:	<http://www.w3.org/2004/02/skos/core#>
DELETE {?s ?p ?o} WHERE { 
{<URI> geo:location ?s . ?s ?p ?o }
UNION {<URI> org:hasMembership ?s . ?s ?p ?o}
UNION {<URI> ontolex:otherForm ?s . ?s ?p ?o}
UNION {?prov foaf:topic <URI> .
	?prov ?hasActivity ?s .
	?s a prov:Activity . ?s ?p ?o}
UNION {<URI> skos:changeNote ?s . ?s ?p ?o}
UNION {<URI> ?p ?o . ?s ?p ?o . FILTER (?s = <URI>) }
}]]>
				</query>
			</xforms:instance>
			<xforms:instance id="sparqlUpdate">
				<query></query>
			</xforms:instance>

			<!-- sparql queries -->
			<xforms:instance id="queryTemplates">
				<queries xmlns=""> </queries>
			</xforms:instance>

			<xforms:instance id="sparqlQuery">
				<query xmlns=""></query>
			</xforms:instance>

			<xforms:instance id="sparqlResponse">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<!-- lists to populate drop-down menus, derived from SPARQL -->
			<xforms:instance id="uncertainty-list" xxforms:exclude-result-prefixes="#all">
				<list xmlns=""></list>
			</xforms:instance>

			<xforms:instance id="role-list" xxforms:exclude-result-prefixes="#all">
				<list xmlns=""></list>
			</xforms:instance>

			<xforms:instance id="institution-list" xxforms:exclude-result-prefixes="#all">
				<list xmlns=""></list>
			</xforms:instance>

			<!-- sparql query templates -->
			<xforms:instance id="sparql-templates">
				<templates xmlns="">
					<prefix><![CDATA[PREFIX rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dcterms:	<http://purl.org/dc/terms/>
PREFIX skos:	<http://www.w3.org/2004/02/skos/core#>
PREFIX foaf:	<http://xmlns.com/foaf/0.1/>
PREFIX crm:	<http://www.cidoc-crm.org/cidoc-crm/>
PREFIX geo:	<http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX kid:	<http://kerameikos.org/id/>
PREFIX org:	<http://www.w3.org/ns/org#>
PREFIX xsd:	<http://www.w3.org/2001/XMLSchema#>
PREFIX un:	<http://www.owl-ontologies.com/Ontology1181490123.owl#>]]></prefix>
					<query id="uncertainty">SELECT ?uri ?label WHERE {?uri a un:Uncertainty ; skos:prefLabel ?label . FILTER(langMatches(lang(?label), "en"))}
						ORDER BY ?label</query>
					<query id="role">SELECT ?uri ?label WHERE {?uri a org:Role ; skos:prefLabel ?label . FILTER(langMatches(lang(?label), "en"))} ORDER BY
						?label</query>
					<query id="institution">SELECT ?uri ?label WHERE { ?uri rdf:type crm:E40_Legal_Body . ?uri skos:prefLabel ?label . FILTER (lang(?label) =
						"en")} ORDER BY ASC(?label)</query>
				</templates>
			</xforms:instance>

			<!-- Solr instances -->
			<xforms:instance id="addIndex">
				<add xmlns=""></add>
			</xforms:instance>
			<xforms:instance id="sendCommit">
				<commit></commit>
			</xforms:instance>
			<xforms:instance id="deleteId">
				<delete xmlns="">
					<id></id>
				</delete>
			</xforms:instance>

			<!-- **************** BINDINGS ********************** -->
			<xforms:bind nodeset="instance('doc')">
				<xforms:bind nodeset="*[1]">
					<xforms:bind nodeset="@rdf:about" required="true()" type="xs:anyURI"/>
					<xforms:bind nodeset="skos:prefLabel" required="true()">
						<xforms:bind nodeset="@xml:lang"
							constraint="string-length(.) &gt; 0 and count(parent::node()/parent::node()/skos:prefLabel[@xml:lang='en']) = 1 and count(parent::node()/parent::node()/skos:prefLabel/@xml:lang) = count(distinct-values(parent::node()/parent::node()/skos:prefLabel/@xml:lang))"
						/>
					</xforms:bind>
					<xforms:bind nodeset="skos:altLabel" required="true()">
						<xforms:bind nodeset="@xml:lang" constraint="string-length(.) &gt; 0"/>
					</xforms:bind>
					<xforms:bind nodeset="skos:definition" required="true()">
						<xforms:bind nodeset="@xml:lang"
							constraint="string-length(.) &gt; 0 and count(parent::node()/parent::node()/skos:definition[@xml:lang='en']) = 1 and count(parent::node()/parent::node()/skos:definition/@xml:lang) = count(distinct-values(parent::node()/parent::node()/skos:definition/@xml:lang))"
						/>
					</xforms:bind>
					<xforms:bind nodeset="skos:scopeNote" required="true()">
						<xforms:bind nodeset="@xml:lang"
							constraint="string-length(.) &gt; 0 and count(parent::node()/parent::node()/skos:scopeNote[@xml:lang='en']) = 1 and count(parent::node()/parent::node()/skos:scopeNote/@xml:lang) = count(distinct-values(parent::node()/parent::node()/skos:scopeNote/@xml:lang))"
						/>
					</xforms:bind>
					<xforms:bind nodeset="//@rdf:resource" required="true()" type="xs:anyURI"/>
				</xforms:bind>
				<xforms:bind nodeset="org:Membership">
					<!-- forbid duplicate URIs for membership -->
					<xforms:bind nodeset="@rdf:about" required="true()" type="xs:anyURI"
						constraint="count(distinct-values(ancestor::rdf:RDF/org:Membership/@rdf:about)) = count(ancestor::rdf:RDF/org:Membership/@rdf:about)"/>
					<xforms:bind nodeset="edm:begin" type="xs:gYear" required="true()"/>
					<xforms:bind nodeset="edm:end" type="xs:gYear" required="true()"/>
					<!-- @rdf:resource -->
					<xforms:bind nodeset="//@rdf:resource" required="true()" type="xs:anyURI"/>
				</xforms:bind>
				<xforms:bind nodeset="geo:SpatialThing">
					<xforms:bind nodeset="geo:lat" constraint="(number(.) &gt; -180 and number(.) &lt; 180)"/>
					<xforms:bind nodeset="geo:long" constraint="(number(.) &gt; -180 and number(.) &lt; 180)"/>
				</xforms:bind>
				<xforms:bind nodeset="dcterms:ProvenanceStatement">
					<xforms:bind nodeset="descendant::dcterms:description" required="true()">
						<xforms:bind nodeset="@xml:lang" required="true()"/>
					</xforms:bind>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind nodeset="id" required="true()" type="xs:anyURI" readonly="../new-id != true()"/>
				<xforms:bind nodeset="new-id" type="xs:boolean"/>
				<xforms:bind nodeset="load-error" type="xs:boolean"/>
				<xforms:bind nodeset="delete-success" type="xs:boolean"/>
				<xforms:bind nodeset="geo">
					<xforms:bind nodeset="type" constraint="string-length(.) &gt; 0"/>
					<xforms:bind nodeset="hasFeature" type="xs:boolean"/>
				</xforms:bind>
				<xforms:bind id="save-trigger" nodeset="save-trigger" type="xs:boolean" readonly=". != true()"/>
			</xforms:bind>

			<xforms:bind id="deprecate-trigger" readonly="instance('doc')/*[1]/dcterms:isReplacedBy"/>

			<!-- **************** DYNAMIC VALIDATION CONTROLS ********************** -->
			<xforms:action ev:event="xxforms-invalid" ev:observer="doc">
				<xforms:setvalue ref="instance('control-instance')/save-trigger" value="false()"/>
			</xforms:action>

			<xforms:action ev:event="xxforms-valid" ev:observer="doc">
				<!-- force the trigger to be readonly if the ID is deprecated -->
				<xforms:setvalue ref="instance('control-instance')/save-trigger" value="false()" if="instance('doc')/*[1]/dcterms:isReplacedBy"/>
				<xforms:setvalue ref="instance('control-instance')/save-trigger" value="true()" if="not(instance('doc')/*[1]/dcterms:isReplacedBy)"/>
			</xforms:action>

			<!-- ************* QUERY ATOM **********************-->
			<!-- query local atom feed to power skos:broader -->
			<xforms:submission id="query-feed" serialization="none" method="get"
				action="/kerameikos/feed/?q=type:{encode-for-uri(normalize-space(instance('control-instance')/atom-type))}+AND+label:{instance('control-instance')/atom-search}&amp;sort=score+desc"
				instance="feed" replace="instance">
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to communicate with kerameikos.org Atom feed.</xforms:message>
			</xforms:submission>

			<!-- ************* SPARQL SUBMISSIONS **********************-->
			<xforms:submission id="submit-sparqlQuery" action="{instance('config')/sparql/query}?query={encode-for-uri(instance('sparqlQuery'))}&amp;output=xml"
				ref="instance('sparqlResponse')" replace="instance" method="get">
				<xforms:message ev:event="xforms-submit-error" level="modal">SPARQL query failed.</xforms:message>
			</xforms:submission>

			<xforms:submission id="delete-graph" action="{instance('config')/sparql/update}" ref="instance('sparqlUpdate')" serialization="text/plain"
				replace="none" method="post" mediatype="application/sparql-update">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">SPARQL update failed.</xforms:message>
					<xforms:setvalue ref="instance('control-instance')/delete-success" value="false()"/>
				</xforms:action>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:setvalue ref="instance('control-instance')/delete-success" value="true()"/>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="post-new" action="{instance('config')/sparql/store}?default" ref="instance('doc')" replace="none" method="post"
				mediatype="application/rdf+xml">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Successfully posted to endpoint.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">Post to endpoint failed.</xforms:message>
			</xforms:submission>

			<!-- ************************* SOLR SUBMISSIONS ************************** -->
			<!-- post instance to Solr -->
			<xforms:submission id="post-solr-doc" action="{instance('config')/solr_published}update" ref="instance('addIndex')" instance="addIndex"
				replace="instance" method="post">
				<xforms:message ev:event="xforms-submit-error" level="modal">Data Failed to POST to Solr. Index may be offline or URL is
					incorrect.</xforms:message>
				<xforms:send submission="submit-commit" ev:event="xforms-submit-done"/>
			</xforms:submission>

			<xforms:submission id="delete-id-from-solr" action="{instance('config')/solr_published}update" ref="instance('deleteId')" instance="deleteId"
				replace="instance" method="post">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Data Failed to POST to Solr. Index may be offline or URL is incorrect.</xforms:message>
					<xforms:setvalue ref="instance('control-instance')/delete-success" value="false()"/>
				</xforms:action>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:send submission="submit-commit"/>
					<xforms:setvalue ref="instance('control-instance')/delete-success" value="true()"/>
				</xforms:action>
			</xforms:submission>

			<!-- send commit -->
			<xforms:submission id="submit-commit" action="{instance('config')/solr_published}update" ref="instance('sendCommit')" instance="sendCommit"
				replace="none" method="post">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:message level="modal">Failed to commit to Solr index.</xforms:message>
					<xforms:setvalue ref="instance('control-instance')/delete-success" value="false()"/>
				</xforms:action>
				<xforms:action ev:event="xforms-submit-done">
					<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Document successfully committed to
						Solr.</xforms:setvalue>
					<xforms:setvalue ref="instance('control-instance')/delete-success" value="true()"/>
				</xforms:action>
			</xforms:submission>

			<!-- ************************* LOAD RDF/XML ************************** -->
			<xforms:submission id="load-rdf" serialization="none" method="get" action="/kerameikos/id/{instance('control-instance')/id}.rdf" replace="instance"
				instance="doc">
				<!-- ************ RDF PROCESSING TO CREATE A NEW ID ************** -->
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/load-error" value="true()"/>
				</xforms:action>

				<!-- ************ RDF PROCESSING TO ADD SUPPLEMENTAL INFORMATION ************** -->
				<xforms:action ev:event="xforms-submit-done">
					<!-- set new-id to false to initiate the comparing of content before and after -->
					<xforms:setvalue ref="instance('control-instance')/new-id" value="false()"/>
					<xforms:setvalue ref="instance('control-instance')/content_before_hash"
						value="digest(normalize-space(saxon:serialize(instance('doc'), 'xml')), 'MD5', 'hex')"/>

					<!-- set geo values -->
					<xforms:setvalue ref="instance('control-instance')/geo/lat" value="instance('doc')/geo:SpatialThing/geo:lat"/>
					<xforms:setvalue ref="instance('control-instance')/geo/long" value="instance('doc')/geo:SpatialThing/geo:long"/>
					<xforms:setvalue ref="instance('control-instance')/geo/geoJSON" value="instance('doc')/geo:SpatialThing/osgeo:asGeoJSON"/>
				</xforms:action>
			</xforms:submission>

			<!-- **************** XFORMS-MODEL-CONSTRUCT-DONE ********************** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<!-- set username -->
				<xforms:setvalue ref="instance('control-instance')/username" value="xxforms:get-remote-user()"/>

				<!-- load id if parameter is passed -->
				<xforms:action if="string(xxforms:get-request-parameter('id'))">
					<xforms:setvalue ref="instance('control-instance')/id" value="xxforms:get-request-parameter('id')"/>
					<xforms:send submission="load-rdf"/>
				</xforms:action>

				<!-- load uncertainty ids -->
				<xforms:setvalue ref="instance('sparqlQuery')"
					value="concat(instance('sparql-templates')/prefix, ' ', instance('sparql-templates')/query[@id='uncertainty'])"/>
				<xforms:send submission="submit-sparqlQuery"/>
				<xforms:action xxforms:iterate="instance('sparqlResponse')//res:result" ev:event="xforms-submit-done">
					<xforms:var name="uri" select="data(res:binding[@name='uri']/res:uri)"/>
					<xforms:var name="label" select="(res:binding[@name='label']/res:literal)"/>
					<xforms:insert context="instance('uncertainty-list')" nodeset="./child::node()[last()]"
						origin="xforms:element('item', (xforms:attribute('uri', $uri), $label))"/>
				</xforms:action>

				<!-- load role ids -->
				<xforms:setvalue ref="instance('sparqlQuery')"
					value="concat(instance('sparql-templates')/prefix, ' ', instance('sparql-templates')/query[@id='role'])"/>
				<xforms:send submission="submit-sparqlQuery"/>
				<xforms:action xxforms:iterate="instance('sparqlResponse')//res:result" ev:event="xforms-submit-done">
					<xforms:var name="uri" select="data(res:binding[@name='uri']/res:uri)"/>
					<xforms:var name="label" select="(res:binding[@name='label']/res:literal)"/>
					<xforms:insert context="instance('role-list')" nodeset="./child::node()[last()]"
						origin="xforms:element('item', (xforms:attribute('uri', $uri), $label))"/>
				</xforms:action>

				<!-- insert P50_has_current_keeper for a collection, query SPARQL for available legal bodies -->
				<xforms:action if="instance('doc')/*[1]/name()='crm:E78_Collection'">
					<xforms:setvalue ref="instance('sparqlQuery')"
						value="concat(instance('sparql-templates')/prefix, ' ', instance('sparql-templates')/query[@id='institution'])"/>
					<xforms:send submission="submit-sparqlQuery"/>
					<xforms:action xxforms:iterate="instance('sparqlResponse')//res:result" ev:event="xforms-submit-done">
						<xforms:var name="uri" select="data(res:binding[@name='uri']/res:uri)"/>
						<xforms:var name="label" select="(res:binding[@name='label']/res:literal)"/>
						<xforms:insert context="instance('institution-list')" nodeset="./child::node()[last()]"
							origin="xforms:element('item', (xforms:attribute('uri', $uri), $label))"/>
					</xforms:action>
				</xforms:action>
			</xforms:action>

			<!-- **************** XFORMS-READY ********************** -->
			<xforms:action ev:event="xforms-ready">
				<!-- enable save trigger if the document is valid on ready -->
				<xforms:setvalue ref="instance('control-instance')/save-trigger" value="true()" if="xxforms:valid(instance('doc'), true())"/>

				<!-- set geographic controls -->
				<xforms:setvalue ref="instance('control-instance')/geo/type"
					value="if (instance('doc')/geo:SpatialThing/geo:lat) then 'point' else if (instance('doc')/geo:SpatialThing/osgeo:asGeoJSON) then 'polygon' else ''"/>
				<xforms:setvalue ref="instance('control-instance')/geo/hasFeature"
					value="if (instance('doc')/geo:SpatialThing/geo:lat or instance('doc')/geo:SpatialThing/osgeo:asGeoJSON) then true() else false()"/>

				<!-- toggle case if it's not a new id -->
				<xforms:toggle case="edit-id" if="instance('control-instance')/new-id = false()"/>
				<xforms:toggle case="load-error" if="instance('control-instance')/load-error = true()"/>
			</xforms:action>
		</xforms:model>
		<!-- XBL components -->
		<xi:include href="xbl/bm/bm.xbl" xi:omit-xml-base="true"/>
		<xi:include href="xbl/wikidata/wikidata.xbl" xi:omit-xml-base="true"/>
		<xi:include href="xbl/getty/getty.xbl" xi:omit-xml-base="true"/>
		<xi:include href="xbl/pleiades/pleiades.xbl" xi:omit-xml-base="true"/>
		<xi:include href="xbl/viaf/viaf.xbl" xi:omit-xml-base="true"/>
	</head>

	<body>
		<xforms:var name="display_path">../</xforms:var>
		<!--<xi:include href="header.xml"/>-->
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<p><a href="../"><span class="glyphicon glyphicon-arrow-left"></span>Return to Admin</a></p>

					<xforms:group ref=".[string-length(instance('control-instance')/status) &gt; 0]">
						<div class="alert-success alert alert-box">
							<p><span class="glyphicon glyphicon-info-sign"></span>
								<strong>Status:</strong>
								<xforms:output ref="instance('control-instance')/status"/>
							</p>
						</div>
					</xforms:group>
					<xforms:group
						ref=".[count(instance('doc')/*[1]/skos:prefLabel/@xml:lang) &gt; count(instance('doc')/*[1]/skos:prefLabel/@xml:lang[not(preceding::skos:prefLabel/@xml:lang = .)])]">
						<div class="alert-danger alert alert-box">
							<p>
								<span class="glyphicon glyphicon-exclamation-sign"></span>
								<strong>Alert:</strong> Preferred label languages must be unique. </p>
						</div>
					</xforms:group>
					<xforms:group
						ref=".[count(instance('doc')/*[1]/skos:definition/@xml:lang) &gt; count(instance('doc')/*[1]/skos:definition/@xml:lang[not(preceding::skos:definition/@xml:lang = .)])]">
						<div class="alert-danger alert alert-box">
							<p>
								<span class="glyphicon glyphicon-exclamation-sign"></span>
								<strong>Alert:</strong> Definition languages must be unique. </p>
						</div>
					</xforms:group>
				</div>
			</div>
			<div class="row">
				<div class="col-md-2">
					<xforms:group ref="instance('doc')/*[1]">
						<xforms:var name="type" select="name()"/>
						<h2>Controls</h2>
						<ul class="list-unstyled">
							<li><h4>Labels/definitions</h4></li>
							<li>
								<xforms:trigger appearance="minimal">
									<xforms:label>
										<span class="glyphicon glyphicon-plus"></span>Preferred Label</xforms:label>
									<xforms:insert ev:event="DOMActivate" origin="instance('prefLabel-template')" context="." nodeset="./child::node()[last()]"
									/>
								</xforms:trigger>
							</li>
							<li>
								<xforms:trigger appearance="minimal">
									<xforms:label>
										<span class="glyphicon glyphicon-plus"></span>Alternate Label</xforms:label>
									<xforms:insert ev:event="DOMActivate" origin="instance('altLabel-template')" context="." nodeset="./child::node()[last()]"/>
								</xforms:trigger>
							</li>
							<li>
								<xforms:trigger appearance="minimal">
									<xforms:label>
										<span class="glyphicon glyphicon-plus"></span>Definition</xforms:label>
									<xforms:insert ev:event="DOMActivate" origin="instance('definition-template')" context="." node="./child::node()[last()]"/>
								</xforms:trigger>
							</li>
							<xforms:group ref=".[count(skos:scopeNote) = 0]">
								<li>
									<xforms:trigger appearance="minimal">
										<xforms:label>
											<span class="glyphicon glyphicon-plus"></span>Scope Note</xforms:label>
										<xforms:insert ev:event="DOMActivate" origin="instance('scopeNote-template')" context="." node="./child::node()[last()]"
										/>
									</xforms:trigger>
								</li>
							</xforms:group>
							<li><h4>Relations</h4></li>
							<li>
								<xforms:trigger appearance="minimal">
									<xforms:label>
										<span class="glyphicon glyphicon-plus"></span>Bibliographic Source</xforms:label>
									<xforms:insert ev:event="DOMActivate" origin="instance('source-template')" context="." nodeset="./child::node()[last()]"/>
								</xforms:trigger>
							</li>
							<li>
								<xforms:trigger appearance="minimal">
									<xforms:label>
										<span class="glyphicon glyphicon-plus"></span>Exact Concept</xforms:label>
									<xforms:insert ev:event="DOMActivate" origin="instance('exactMatch-template')" context="." nodeset="./child::node()[last()]"
									/>
								</xforms:trigger>
							</li>
							<xforms:group ref=".[not($type='foaf:Person')]">
								<li>
									<xforms:trigger appearance="minimal">
										<xforms:label>
											<span class="glyphicon glyphicon-plus"></span><xforms:output
												value="if ($type='crm:E53_Place') then 'Parent Region' else 'Broader Concept'"/>
										</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<xforms:setvalue ref="instance('control-instance')/atom-type" value="concat('&#x022;', $type, '&#x022;')"/>
											<xxforms:show dialog="broader-dialog"/>
										</xforms:action>
									</xforms:trigger>
								</li>
							</xforms:group>
							<li>
								<xforms:trigger appearance="minimal">
									<xforms:label>
										<span class="glyphicon glyphicon-plus"></span>Related Web Page</xforms:label>
									<xforms:insert ev:event="DOMActivate" origin="instance('seeAlso-template')" context="." nodeset="./child::node()[last()]"/>
								</xforms:trigger>
							</li>
							<xforms:group ref=".[$type='crm:E53_Place'][not(instance('doc')/geo:SpatialThing)]">
								<li>
									<h4>Geography</h4>
								</li>
								<li>
									<xforms:trigger appearance="minimal">
										<xforms:label>
											<span class="glyphicon glyphicon-plus"></span>Coordinates</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<!-- insert geo:location and crm:P168_place_is_defined_by -->
											<xforms:insert context="." nodeset="./child::node()[last()]"
												origin="xforms:element('geo:location', (xforms:attribute('rdf:resource', concat('http://kerameikos.org/id/', instance('control-instance')/id, '#this')), ''))"/>
											<xforms:insert context="." nodeset="./child::node()[last()]"
												origin="xforms:element('crm:P168_place_is_defined_by', (xforms:attribute('rdf:resource', concat('http://kerameikos.org/id/', instance('control-instance')/id, '#this')), ''))"/>
											
											<!-- insert SpatialThing -->
											<xforms:insert context="instance('doc')" nodeset="./child::node()[last()]"
												origin="xforms:element('geo:SpatialThing', (xforms:attribute('rdf:about', concat('http://kerameikos.org/id/', instance('control-instance')/id, '#this')), ''))"/>
											<!-- insert additonal rdf:type -->
											<xforms:insert context="instance('doc')/geo:SpatialThing" nodeset="./child::node()[last()]"
												origin="xforms:element('rdf:type', (xforms:attribute('rdf:resource', 'http://www.ics.forth.gr/isl/CRMgeo/SP5_Geometric_Place_Expression'), ''))"
											/>
										</xforms:action>
									</xforms:trigger>
								</li>
							</xforms:group>
							<li>
								<h4>Miscellaneous</h4>
							</li>
							<xforms:group ref=".[$type='crm:E40_Legal_Body']">
								<xforms:group ref=".[count(foaf:thumbnail) = 0]">
									<li>
										<xforms:trigger appearance="minimal">
											<xforms:label>
												<span class="glyphicon glyphicon-plus"></span>Thumbnail</xforms:label>
											<xforms:insert ev:event="DOMActivate" origin="instance('thumbnail-template')" context="."
												nodeset="./child::node()[last()]"/>
										</xforms:trigger>
									</li>
								</xforms:group>
							</xforms:group>
							<xforms:group ref=".[$type='foaf:Person' or $type='foaf:Organization' or $type = 'foaf:Group']">
								<li>
									<h4>Roles</h4>
								</li>
								<li>
									<xforms:trigger appearance="minimal">
										<xforms:label>
											<span class="glyphicon glyphicon-plus"></span>Role</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<!-- insert geo:location -->
											<xforms:insert context="." nodeset="./child::node()[last()]"
												origin="xforms:element('org:hasMembership', (xforms:attribute('rdf:resource', ''), ''))"/>
											<!-- insert org:Membership -->
											<xforms:insert context="instance('doc')" nodeset="./child::node()[last()]"
												origin="xforms:element('org:Membership', (xforms:attribute('rdf:about', ''), ''))"/>
											<!-- insert org:role into the last org:Membership -->
											<xforms:insert context="instance('doc')/org:Membership[last()]" nodeset="./child::node()[last()]"
												origin="xforms:element('org:role', (xforms:attribute('rdf:resource', ''), ''))"/>
										</xforms:action>
									</xforms:trigger>
								</li>
							</xforms:group>
						</ul>
					</xforms:group>
				</div>
				<div class="col-md-8">
					<xforms:switch>
						<xforms:case id="create-id">
							<h1>Create ID</h1>
							<div>
								<xforms:input ref="instance('control-instance')/id" incremental="true">
									<xforms:label>id</xforms:label>
									<xforms:alert>Required</xforms:alert>
								</xforms:input>
							</div>
							<div>
								<xforms:select1 ref="instance('control-instance')/type">
									<xforms:label>Type</xforms:label>
									<xforms:alert>Required</xforms:alert>
									<xforms:item>
										<xforms:label>Select...</xforms:label>
										<xforms:value/>
									</xforms:item>
									<xforms:itemset nodeset="instance('classes')/class">
										<xforms:label ref="label"/>
										<xforms:value ref="type"/>
									</xforms:itemset>
								</xforms:select1>

								<!-- display trigger to set the @rdf:about of the concept for new ids in order to proceed with class selection -->
								<xforms:trigger>
									<xforms:label>Proceed</xforms:label>
									<xforms:action ev:event="DOMActivate">
										<xforms:var name="type" select="instance('control-instance')/type"/>

										<!-- set URI -->
										<xforms:setvalue ref="instance('control-instance')/uri"
											value="concat('http://kerameikos.org/id/', instance('control-instance')/id)"/>

										<!-- create resource description -->
										<xforms:insert context="instance('doc')"
											origin="xforms:element($type, xforms:attribute('rdf:about', instance('control-instance')/uri))"/>
										<!-- insert rdf:type as skos:Concept -->
										<xforms:insert context="instance('doc')/*[1]"
											origin="xforms:element('rdf:type', xforms:attribute('rdf:resource', 'http://www.w3.org/2004/02/skos/core#Concept'))"/>
										<!-- insert skos:prefLabel and skos:definition with @xml:lang='en'-->
										<xforms:insert context="instance('doc')/*[1]"
											origin="xforms:element('skos:prefLabel', xforms:attribute('xml:lang', 'en'))"/>
										<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]"
											origin="xforms:element('skos:definition', xforms:attribute('xml:lang', 'en'))"/>
										<!-- insert skos:inScheme -->
										<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]"
											origin="xforms:element('skos:inScheme', xforms:attribute('rdf:resource', 'http://kerameikos.org/id/'))"/>
										<!-- insert related foaf:webpage for an institution -->
										<xforms:action if="$type='crm:E40_Legal_Body'">
											<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]"
												origin="xforms:element('foaf:homepage', xforms:attribute('rdf:resource', ''))"/>
										</xforms:action>
										<!-- insert P50_has_current_keeper for a collection, query SPARQL for available legal bodies -->
										<xforms:action if="$type='crm:E78_Collection'">
											<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]"
												origin="xforms:element('crm:P50_has_current_keeper', (xforms:attribute('rdf:resource', ''),''))"/>
											<xforms:setvalue ref="instance('sparqlQuery')"
												value="concat(instance('sparql-templates')/prefix, ' ', instance('sparql-templates')/query[@id='institution'])"/>
											<xforms:send submission="submit-sparqlQuery"/>
											<xforms:action xxforms:iterate="instance('sparqlResponse')//res:result" ev:event="xforms-submit-done">
												<xforms:var name="uri" select="data(res:binding[@name='uri']/res:uri)"/>
												<xforms:var name="label" select="(res:binding[@name='label']/res:literal)"/>
												<xforms:insert context="instance('institution-list')" nodeset="./child::node()[last()]"
													origin="xforms:element('item', (xforms:attribute('uri', $uri), data($label)))"/>
											</xforms:action>
										</xforms:action>

										<!-- *** Provenance *** -->
										<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]" origin="instance('changeNote-template')"/>
										<xforms:setvalue ref="instance('doc')/*[1]/skos:changeNote/@rdf:resource"
											value="concat(instance('control-instance')/uri, '#provenance')"/>

										<xforms:insert context="instance('doc')" nodeset="./child::node()[last()]" origin="instance('provenance-template')"/>
										<xforms:setvalue ref="instance('doc')/dcterms:ProvenanceStatement/@rdf:about"
											value="concat(instance('control-instance')/uri, '#provenance')"/>
										<xforms:setvalue ref="instance('doc')/dcterms:ProvenanceStatement/foaf:topic/@rdf:resource"
											value="instance('control-instance')/uri"/>

										<!-- Create Activity -->
										<xforms:insert context="instance('doc')/dcterms:ProvenanceStatement" nodeset="./child::node()[last()]"
											origin="xforms:element('prov:wasGeneratedBy')"/>
										<xforms:insert context="instance('doc')/dcterms:ProvenanceStatement/prov:wasGeneratedBy"
											origin="instance('activity-template')"/>
										<xforms:insert context="instance('doc')/dcterms:ProvenanceStatement/prov:wasGeneratedBy/prov:Activity"
											origin="xforms:element('rdf:type', xforms:attribute('rdf:resource', 'http://www.w3.org/ns/prov#Create'))"/>
										<xforms:setvalue ref="instance('doc')/dcterms:ProvenanceStatement/prov:wasGeneratedBy/prov:Activity/dcterms:type"
											>manual</xforms:setvalue>
										<xforms:setvalue
											ref="instance('doc')/dcterms:ProvenanceStatement/prov:wasGeneratedBy/prov:Activity/prov:wasAssociatedWith/@rdf:resource"
											value="concat('http://kerameikos.org/editor/', instance('control-instance')/username)"/>
										<xforms:setvalue ref="instance('doc')/dcterms:ProvenanceStatement/prov:wasGeneratedBy/prov:Activity/prov:atTime"
											value="current-dateTime()"/>

										<!-- toggle interface -->
										<xforms:toggle case="edit-id"/>
									</xforms:action>
								</xforms:trigger>
							</div>
						</xforms:case>
						<xforms:case id="load-error">
							<div class="alert-danger alert alert-box">
								<span class="glyphicon glyphicon-exclamation-sign"></span>
								<strong>Alert:</strong> There is no RDF file matching this ID on the local filesystem.</div>
						</xforms:case>
						<xforms:case id="edit-id">
							<div class="submission">
								<xforms:trigger bind="save-trigger">
									<xforms:label><span class="glyphicon glyphicon-floppy-disk"></span>Save</xforms:label>
									<xforms:action ev:event="DOMActivate">

										<!-- if the ID is not new, then evaluate whether a provenance should be added -->
										<xforms:action if="instance('control-instance')/new-id = false()">
											<!-- set hash -->
											<xforms:setvalue ref="instance('control-instance')/content_after_hash"
												value="digest(normalize-space(saxon:serialize(instance('doc'), 'xml')), 'MD5', 'hex')"/>

											<!-- if the hashes are the same, then update the status -->
											<xforms:action
												if="instance('control-instance')/content_before_hash = instance('control-instance')/content_after_hash">
												<xforms:setvalue ref="instance('control-instance')/status">The content is unchanged, so the ID has not been
													saved and updated online.</xforms:setvalue>
											</xforms:action>

											<!-- if the hashed content has changed since the file was loaded -->
											<xforms:action
												if="not(instance('control-instance')/content_before_hash = instance('control-instance')/content_after_hash)">

												<!-- insert a Modify Activity into the provenance, but only if the session-id isn't set -->
												<xforms:action if="not(string(instance('control-instance')/session-id))">
													<xforms:insert context="instance('doc')/dcterms:ProvenanceStatement" nodeset="./child::node()[last()]"
														origin="xforms:element('prov:activity')"/>
													<xforms:insert context="instance('doc')/dcterms:ProvenanceStatement/prov:activity[last()]"
														origin="instance('activity-template')"/>
													<xforms:insert context="instance('doc')/dcterms:ProvenanceStatement/prov:activity[last()]/prov:Activity"
														origin="xforms:element('rdf:type', xforms:attribute('rdf:resource', 'http://www.w3.org/ns/prov#Modify'))"/>
													<xforms:setvalue
														ref="instance('doc')/dcterms:ProvenanceStatement/prov:activity[last()]/prov:Activity/dcterms:type"
														>manual</xforms:setvalue>
													<xforms:setvalue
														ref="instance('doc')/dcterms:ProvenanceStatement/prov:activity[last()]/prov:Activity/prov:wasAssociatedWith/@rdf:resource"
														value="concat('http://kerameikos.org/editor/', instance('control-instance')/username)"/>
													<xforms:setvalue
														ref="instance('doc')/dcterms:ProvenanceStatement/prov:activity[last()]/prov:Activity/prov:atTime"
														value="current-dateTime()"/>
												</xforms:action>

												<!-- perform CRUD only for modified IDs -->
												<!-- save file to the filesystem -->
												<xforms:setvalue ref="instance('save-config')/url"
													value="concat(instance('config')/data_path, '/id/',  instance('control-instance')/id, '.rdf')"/>
												<xforms:insert nodeset="instance('dump')"
													origin="xxforms:call-xpl('oxf:/apps/kerameikos/xpl/xforms/save-id.xpl', ('doc', 'configuration'), (instance('doc'), instance('save-config')), 'data')"/>

												<!-- delete graph from triplestore, then repost updates -->
												<xforms:setvalue ref="instance('sparqlUpdate')"
													value="replace(instance('sparqlUpdate-template'), 'URI', instance('doc')/*[1]/@rdf:about)"/>
												<xforms:send submission="delete-graph"/>
												<xforms:send submission="post-new"/>

												<!-- post to Solr, if it isn't deprecated. otherwise delete from Solr -->
												<xforms:action if="instance('doc')/*[1]/dcterms:isReplacedBy">
													<xforms:setvalue ref="instance('deleteId')/id" value="instance('control-instance')/id"/>
													<xforms:send submission="delete-id-from-solr"/>
												</xforms:action>
												<xforms:action if="not(instance('doc')/*[1]/dcterms:isReplacedBy)">
													<xforms:insert nodeset="instance('addIndex')"
														origin="xxforms:call-xpl('oxf:/apps/kerameikos/xpl/views/serializations/rdf/solr.xpl', 'data', instance('doc'), 'data')"/>
													<xforms:send submission="post-solr-doc"/>
												</xforms:action>

												<!-- set new hash -->
												<xforms:setvalue ref="instance('control-instance')/content_before_hash"
													value="digest(normalize-space(saxon:serialize(instance('doc'), 'xml')), 'MD5', 'hex')"/>

												<!-- set session id-->
												<xforms:setvalue ref="instance('control-instance')/session-id" value="xxforms:document-id()"/>
											</xforms:action>
										</xforms:action>

										<!-- perform CRUD for new IDs -->
										<xforms:action if="instance('control-instance')/new-id = true()">
											<!-- save file to the filesystem -->
											<xforms:setvalue ref="instance('save-config')/url"
												value="concat(instance('config')/data_path, '/id/',  instance('control-instance')/id, '.rdf')"/>
											<xforms:insert nodeset="instance('dump')"
												origin="xxforms:call-xpl('oxf:/apps/kerameikos/xpl/xforms/save-id.xpl', ('doc', 'configuration'), (instance('doc'), instance('save-config')), 'data')"/>

											<!-- delete graph from triplestore, then repost updates -->
											<xforms:setvalue ref="instance('sparqlUpdate')"
												value="replace(instance('sparqlUpdate-template'), 'URI', instance('doc')/*[1]/@rdf:about)"/>
											<xforms:send submission="delete-graph"/>
											<xforms:send submission="post-new"/>

											<!-- post to Solr, if it isn't deprecated. otherwise delete from Solr -->
											<xforms:action if="instance('doc')/*[1]/dcterms:isReplacedBy">
												<xforms:setvalue ref="instance('deleteId')/id" value="instance('control-instance')/id"/>
												<xforms:send submission="delete-id-from-solr"/>
											</xforms:action>
											<xforms:action if="not(instance('doc')/*[1]/dcterms:isReplacedBy)">
												<xforms:insert nodeset="instance('addIndex')"
													origin="xxforms:call-xpl('oxf:/apps/kerameikos/xpl/views/serializations/rdf/solr.xpl', 'data', instance('doc'), 'data')"/>
												<xforms:send submission="post-solr-doc"/>
											</xforms:action>

											<!-- set new-id to false -->
											<xforms:setvalue ref="instance('control-instance')/new-id" value="false()"/>
											<!-- set session id to prevent Modify events from being inserted after the initial save -->
											<xforms:setvalue ref="instance('control-instance')/session-id" value="xxforms:document-id()"/>
											<!-- set new hash -->
											<xforms:setvalue ref="instance('control-instance')/content_before_hash"
												value="digest(normalize-space(saxon:serialize(instance('doc'), 'xml')), 'MD5', 'hex')"/>
										</xforms:action>
									</xforms:action>
								</xforms:trigger>

								<xforms:trigger bind="deprecate-trigger">
									<xforms:label><span class="glyphicon glyphicon-remove-sign"></span>Deprecate</xforms:label>
									<xforms:action ev:event="DOMActivate">
										<!-- show deprecate window -->
										<xforms:var name="type" select="instance('doc')/*[1]/name()"/>
										<xforms:setvalue ref="instance('control-instance')/atom-type" value="concat('&#x022;', $type, '&#x022;')"/>
										<xxforms:show dialog="deprecate-dialog"/>
									</xforms:action>
								</xforms:trigger>
							</div>

							<h1>Edit ID <small>
									<xforms:trigger appearance="minimal">
										<xforms:label ref="concat('(http://kerameikos.org/id/', instance('control-instance')/id, ')')"/>
										<xforms:action ev:event="DOMActivate">
											<xforms:load show="new" resource="{concat('http://kerameikos.org/id/', instance('control-instance')/id)}"/>
										</xforms:action>
									</xforms:trigger>
								</small></h1>

							<xforms:group ref="instance('doc')">
								<xforms:group ref="*[1]">
									<xforms:var name="type" select="name()"/>

									<div class="section">
										<h3>
											<xforms:output ref="instance('classes')/class[type=$type]/label"/>
											<small> (<xforms:output ref="instance('classes')/class[type=$type]/type"/>)</small>
										</h3>
										<div class="subsection">
											<h4>Labels and Definitions</h4>
											<xforms:repeat nodeset="skos:prefLabel">
												<div>
													<xforms:input ref=".">
														<xforms:label ref="name()"/>
														<xforms:alert>Required</xforms:alert>
													</xforms:input>
													<xforms:select1 ref="@xml:lang">
														<xforms:item>
															<xforms:label>Select...</xforms:label>
															<xforms:value/>
														</xforms:item>
														<xforms:itemset nodeset="instance('languages')/language">
															<xforms:label ref="."/>
															<xforms:value ref="@value"/>
														</xforms:itemset>
														<xforms:alert>Required; English label most occur once.</xforms:alert>
													</xforms:select1>
													<xforms:group ref=".[count(instance('doc')/*[1]/skos:prefLabel) &gt; 1]">
														<xforms:trigger appearance="minimal">
															<xforms:delete ev:event="DOMActivate" context="."/>
															<xforms:label>
																<span class="glyphicon glyphicon-remove"></span>
															</xforms:label>
														</xforms:trigger>
													</xforms:group>
												</div>
											</xforms:repeat>
											<xforms:repeat nodeset="skos:altLabel">
												<div>
													<xforms:input ref=".">
														<xforms:label ref="name()"/>
														<xforms:alert>Required</xforms:alert>
													</xforms:input>
													<xforms:select1 ref="@xml:lang">
														<xforms:item>
															<xforms:label>Select...</xforms:label>
															<xforms:value/>
														</xforms:item>
														<xforms:itemset nodeset="instance('languages')/language">
															<xforms:label ref="."/>
															<xforms:value ref="@value"/>
														</xforms:itemset>
														<xforms:alert>Required</xforms:alert>
													</xforms:select1>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:repeat>
											<xforms:repeat nodeset="skos:definition">
												<div>
													<xforms:textarea ref=".">
														<xforms:label ref="name()"/>
														<xforms:alert>Required</xforms:alert>
														<xforms:hint>Definition of concept.</xforms:hint>
													</xforms:textarea>
													<xforms:select1 ref="@xml:lang">
														<xforms:item>
															<xforms:label>Select...</xforms:label>
															<xforms:value/>
														</xforms:item>
														<xforms:itemset nodeset="instance('languages')/language">
															<xforms:label ref="."/>
															<xforms:value ref="@value"/>
														</xforms:itemset>
														<xforms:alert>Required; English label most occur once.</xforms:alert>
													</xforms:select1>
													<xforms:group ref=".[count(instance('doc')/*[1]/skos:definition) &gt; 1]">
														<xforms:trigger appearance="minimal">
															<xforms:delete ev:event="DOMActivate" context="."/>
															<xforms:label>
																<span class="glyphicon glyphicon-remove"></span>
															</xforms:label>
														</xforms:trigger>
													</xforms:group>
												</div>
											</xforms:repeat>
											<xforms:group ref="skos:scopeNote">
												<div>
													<xforms:textarea ref=".">
														<xforms:label>Scope Note</xforms:label>
														<xforms:alert>Required</xforms:alert>
														<xforms:hint>Guidelines or context for usage.</xforms:hint>
													</xforms:textarea>
													<xforms:select1 ref="@xml:lang">
														<xforms:item>
															<xforms:label>Select...</xforms:label>
															<xforms:value/>
														</xforms:item>
														<xforms:itemset nodeset="instance('languages')/language">
															<xforms:label ref="."/>
															<xforms:value ref="@value"/>
														</xforms:itemset>
														<xforms:alert>Required; English label most occur once.</xforms:alert>
													</xforms:select1>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:group>
											<hr />
										</div>
										<div class="subsection">
											<h4>Relations</h4>
											<xforms:repeat nodeset="dcterms:source">
												<div>
													<xforms:input ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
														<xforms:alert>Required, must be URI</xforms:alert>
														<xforms:hint>Bibliographic source</xforms:hint>
													</xforms:input>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:repeat>
											<xforms:repeat nodeset="skos:broader">
												<div>
													<xforms:output ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
													</xforms:output>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:repeat>
											<xforms:repeat nodeset="dcterms:isPartOf">
												<div>
													<xforms:output ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
														<xforms:alert>Required, must be URI</xforms:alert>
														<xforms:hint>A related resource in which the described resource is physically or logically
															included.</xforms:hint>
													</xforms:output>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:repeat>
											<xforms:repeat nodeset="skos:exactMatch">
												<div>
													<xforms:input ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
														<xforms:alert>Required, must be URI</xforms:alert>
														<xforms:hint>Exactly matching concept in other thesaurus.</xforms:hint>
													</xforms:input>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:repeat>
											<xforms:repeat nodeset="skos:relatedMatch">
												<div>
													<xforms:input ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
														<xforms:alert>Required, must be URI</xforms:alert>
														<xforms:hint>Related match in another thesaurus.</xforms:hint>
													</xforms:input>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:repeat>
											<xforms:repeat nodeset="rdfs:seeAlso">
												<div>
													<xforms:input ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
														<xforms:alert>Required, must be URI</xforms:alert>
														<xforms:hint>A web page about the concept.</xforms:hint>
													</xforms:input>
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" context="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</div>
											</xforms:repeat>
											<hr />
										</div>
										<div class="subsection">
											<h4>Miscellaneous Fields</h4>
											<xforms:group ref="crm:P50_has_current_keeper">
												<div>
													<xforms:select1 ref="@rdf:resource">
														<xforms:label>Institution</xforms:label>
														<xforms:item>
															<xforms:label>Select...</xforms:label>
															<xforms:value/>
														</xforms:item>
														<xforms:itemset nodeset="instance('institution-list')//item">
															<xforms:label ref="."/>
															<xforms:value ref="@uri"/>
														</xforms:itemset>
														<xforms:alert>Required, must be URI</xforms:alert>
													</xforms:select1>
												</div>
											</xforms:group>
											<xforms:group ref="foaf:homepage">
												<div>
													<xforms:input ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
														<xforms:alert>Required, must be URI</xforms:alert>
													</xforms:input>
												</div>
											</xforms:group>
											<xforms:group ref="foaf:thumbnail">
												<div>
													<xforms:input ref="@rdf:resource">
														<xforms:label ref="parent::node()/name()"/>
														<xforms:alert>Required, must be URI</xforms:alert>
													</xforms:input>
												</div>
											</xforms:group>
											<hr />
										</div>
									</div>
								</xforms:group>
								<!-- geographic -->
								<xforms:group ref="geo:SpatialThing">
									<div class="section">
										<div class="row">
											<div class="col-md-12">
												<h3>Geography <small>
														<xforms:output value="concat('(', @rdf:about, ')')"/>
														<xforms:trigger appearance="minimal">
															<xforms:action ev:event="DOMActivate">
																<xforms:delete nodeset="instance('doc')/*[1]/geo:location"/>
																<xforms:delete nodeset="."/>
																<xforms:setvalue ref="instance('control-instance')/geo/type"/>
																<xforms:setvalue ref="instance('control-instance')/geo/hasFeature" value="false()"/>
															</xforms:action>
															<xforms:label>
																<span class="glyphicon glyphicon-remove"></span>
															</xforms:label>
														</xforms:trigger>
													</small>
												</h3>
												<xforms:group ref=".[not(geo:lat and geo:long) and not(osgeo:asGeoJSON)]">
													<div class="alert-danger alert-box alert">
														<span class="glyphicon glyphicon-exclamation-sign"></span>
														<strong>Alert:</strong> Must contain coordinates. </div>
												</xforms:group>
												<xforms:group ref=".[child::geo:lat and not(number(geo:lat)) and child::geo:long and not(number(geo:long))]">
													<div class="alert-danger alert-box alert">
														<span class="glyphicon glyphicon-exclamation-sign"></span>
														<strong>Alert:</strong> Latitude and Longitude must contain valid coordinates. </div>
												</xforms:group>
												<xforms:group ref=".[child::osgeo:asGeoJSON and not(string(osgeo:asGeoJSON))]">
													<div class="alert-danger alert-box alert">
														<span class="glyphicon glyphicon-exclamation-sign"></span>
														<strong>Alert:</strong> A polygon must be drawn. </div>
												</xforms:group>
												<div class="trigger_container">
													<xforms:group ref=".[count(un:hasUncertainty) = 0]">
														<xforms:trigger appearance="minimal">
															<xforms:label>
																<span class="glyphicon glyphicon-plus"></span>Uncertainty</xforms:label>
															<xforms:insert ev:event="DOMActivate" origin="instance('hasUncertainty-template')" context="."
																nodeset="./child::node()[last()]"/>
														</xforms:trigger>
													</xforms:group>
												</div>
											</div>
										</div>
										<div class="row">
											<div class="col-md-4">
												<xforms:select1 ref="instance('control-instance')/geo/type" appearance="full">
													<xforms:item>
														<xforms:label>point</xforms:label>
														<xforms:value>point</xforms:value>
													</xforms:item>
													<xforms:item>
														<xforms:label>polygon</xforms:label>
														<xforms:value>polygon</xforms:value>
													</xforms:item>
													<xforms:action ev:event="xforms-value-changed">
														<!-- insert elements, if necessary -->
														<xforms:var name="type" select="."/>
														<xforms:action if="$type='point'">
															<xforms:delete nodeset="instance('doc')/geo:SpatialThing/osgeo:asGeoJSON"/>
															<!-- insert geo:lat and geo:long if they do not exist -->
															<xforms:action if="not(instance('doc')/geo:SpatialThing/geo:lat)">
																<xforms:insert context="instance('doc')/geo:SpatialThing" origin="instance('long-template')"/>
																<xforms:insert context="instance('doc')/geo:SpatialThing" origin="instance('lat-template')"/>
															</xforms:action>
														</xforms:action>
														<xforms:action if="$type='polygon'">
															<xforms:delete nodeset="instance('doc')/geo:SpatialThing/geo:lat"/>
															<xforms:delete nodeset="instance('doc')/geo:SpatialThing/geo:long"/>
															<!-- insert geo:lat and geo:long if they do not exist -->
															<xforms:action if="not(instance('doc')/geo:SpatialThing/osgeo:asGeoJSON)">
																<xforms:insert context="instance('doc')/geo:SpatialThing"
																	origin="instance('asGeoJSON-template')"/>
															</xforms:action>
														</xforms:action>
														<!-- initialize openlayers -->
														<xxforms:script>init();</xxforms:script>
													</xforms:action>
												</xforms:select1>
												<xforms:group ref="geo:lat">
													<div>
														<xforms:input ref=".">
															<xforms:label>Latitude</xforms:label>
															<xforms:alert>Must be -180 to 180</xforms:alert>
														</xforms:input>
													</div>
												</xforms:group>
												<xforms:group ref="geo:long">
													<div>
														<xforms:input ref=".">
															<xforms:label>Longitude</xforms:label>
															<xforms:alert>Must be -180 to 180</xforms:alert>
														</xforms:input>
													</div>
												</xforms:group>
												<xforms:group ref="osgeo:asGeoJSON">
													<div>
														<xforms:output ref=".">
															<xforms:label>Polygon</xforms:label>
														</xforms:output>
													</div>
												</xforms:group>
												<xforms:group ref="dcterms:isPartOf">
													<div>
														<xforms:output ref="@rdf:resource">
															<xforms:label>Parent Region</xforms:label>
														</xforms:output>
													</div>
												</xforms:group>
												<xforms:group ref="un:hasUncertainty">
													<div>
														<xforms:select1 ref="@rdf:resource">
															<xforms:label>Uncertainty</xforms:label>
															<xforms:alert>Required</xforms:alert>
															<xforms:item>
																<xforms:label>Select...</xforms:label>
																<xforms:value/>
															</xforms:item>
															<xforms:itemset nodeset="instance('uncertainty-list')//item">
																<xforms:label ref="."/>
																<xforms:value ref="@uri"/>
															</xforms:itemset>
														</xforms:select1>
														<xforms:trigger appearance="minimal">
															<xforms:delete ev:event="DOMActivate" context="."/>
															<xforms:label>
																<span class="glyphicon glyphicon-remove"></span>
															</xforms:label>
														</xforms:trigger>
													</div>
												</xforms:group>
											</div>
											<div class="col-md-8">
												<xforms:group ref=".[string(instance('control-instance')/geo/type)]">
													<div id="map"></div>
												</xforms:group>
											</div>
										</div>
									</div>
								</xforms:group>
								<!-- org:Membership -->
								<xforms:repeat nodeset="org:Membership">
									<xforms:var name="uri" select="@rdf:about"/>
									<xforms:var name="position" select="position()"/>
									<div class="section">
										<h3>Membership <small>
												<xforms:output value="concat('(', $uri, ')')"/>
												<xforms:trigger appearance="minimal">
													<xforms:action ev:event="DOMActivate">
														<xforms:delete nodeset="instance('doc')/*[1]/org:hasMembership[@rdf:resource=$uri]"/>
														<xforms:delete nodeset="."/>
													</xforms:action>
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
												</xforms:trigger>
											</small>
										</h3>
										<xforms:group ref=".[count(ancestor::rdf:RDF/org:Membership[@rdf:about=$uri]) != 1]">
											<div class="alert-danger alert-box alert">
												<span class="glyphicon glyphicon-exclamation-sign"></span>
												<strong>Alert:</strong> There cannot be multiple memberships with identical URIs.</div>
										</xforms:group>
										<div class="trigger_container">
											<xforms:group ref=".[count(edm:begin) = 0]">
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<span class="glyphicon glyphicon-plus"></span>Start Date</xforms:label>
													<xforms:insert ev:event="DOMActivate" origin="instance('startDate-template')" context="."
														nodeset="./child::node()[last()]"/>
												</xforms:trigger>
											</xforms:group>
											<xforms:group ref=".[count(edm:end) = 0]">
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<span class="glyphicon glyphicon-plus"></span>End Date</xforms:label>
													<xforms:insert ev:event="DOMActivate" origin="instance('endDate-template')" context="."
														nodeset="./child::node()[last()]"/>
												</xforms:trigger>
											</xforms:group>
											<xforms:group ref=".[count(org:organization) = 0]">
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<span class="glyphicon glyphicon-plus"></span>Artist Group</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('control-instance')/membership-position" value="$position"/>
														<xforms:setvalue ref="instance('control-instance')/atom-type">&#x022;foaf:Group&#x022;</xforms:setvalue>
														<xxforms:show dialog="organization-dialog"/>
													</xforms:action>
												</xforms:trigger>
												<xforms:trigger appearance="minimal">
													<xforms:label>
														<span class="glyphicon glyphicon-plus"></span>Organization (workshop)</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('control-instance')/membership-position" value="$position"/>
														<xforms:setvalue ref="instance('control-instance')/atom-type"
															>&#x022;foaf:Organization&#x022;</xforms:setvalue>
														<xxforms:show dialog="organization-dialog"/>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
										</div>
										<!-- role -->
										<xforms:group ref="org:role">
											<div>
												<xforms:select1 ref="@rdf:resource">
													<xforms:label>Role</xforms:label>
													<xforms:alert>Required</xforms:alert>
													<xforms:item>
														<xforms:label>Select...</xforms:label>
														<xforms:value/>
													</xforms:item>
													<xforms:itemset nodeset="instance('role-list')//item">
														<xforms:label ref="."/>
														<xforms:value ref="@uri"/>
													</xforms:itemset>
													<!-- when the value of the drop down is changed, update the URI of this object and the org:hasMembership in the parent concept -->
													<xforms:action ev:event="xforms-value-changed">
														<xforms:var name="role" select="."/>
														<xforms:var name="count" select="count(instance('doc')//org:role[@rdf:resource = $role])"/>
														<xforms:setvalue ref="ancestor::org:Membership/@rdf:about"
															value="concat(ancestor::rdf:RDF/*[1]/@rdf:about, '#', substring-after($role, 'id/'), if ($count &gt; 1) then $count else '')"/>
														<xforms:setvalue ref="ancestor::rdf:RDF/*[1]/org:hasMembership[position()=$position]/@rdf:resource"
															value="concat(ancestor::rdf:RDF/*[1]/@rdf:about, '#', substring-after($role, 'id/'), if ($count &gt; 1) then $count else '')"
														/>
													</xforms:action>
												</xforms:select1>
											</div>
										</xforms:group>
										<!-- start and end date -->
										<xforms:group ref="edm:begin">
											<xforms:var name="year" select="abs(number(.))"/>
											<div>
												<xforms:input ref=".">
													<xforms:label>Start Date</xforms:label>
													<xforms:alert>Must conform to xsd:gYear</xforms:alert>
												</xforms:input>
												<xforms:output value="if (number(.) &lt; 0) then concat($year, ' B.C.') else concat('A.D. ', $year)"/>
												<xforms:trigger appearance="minimal">
													<xforms:delete ev:event="DOMActivate" context="."/>
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
												</xforms:trigger>
											</div>
										</xforms:group>
										<xforms:group ref="edm:end">
											<xforms:var name="year" select="abs(number(.))"/>
											<div>
												<xforms:input ref=".">
													<xforms:label>End Date</xforms:label>
													<xforms:alert>Must conform to xsd:gYear</xforms:alert>
												</xforms:input>
												<xforms:output value="if (number(.) &lt; 0) then concat($year, ' B.C.') else concat('A.D. ', $year)"/>
												<xforms:trigger appearance="minimal">
													<xforms:delete ev:event="DOMActivate" context="."/>
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
												</xforms:trigger>
											</div>
										</xforms:group>
										<xforms:group ref="org:organization">
											<div>
												<xforms:output ref="@rdf:resource">
													<xforms:label>Workshop</xforms:label>
												</xforms:output>
												<xforms:trigger appearance="minimal">
													<xforms:delete ev:event="DOMActivate" context="."/>
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
												</xforms:trigger>
											</div>
										</xforms:group>
										<hr />
									</div>
								</xforms:repeat>

								<!-- display provenance -->
								<xforms:group ref="dcterms:ProvenanceStatement">
									<div class="section">
										<h3>Provenance</h3>
										<table class="table">
											<thead>
												<th>Date</th>
												<th>Editor</th>
												<th>Edit Type</th>
												<th>Description</th>
											</thead>
											<tbody>
												<xforms:repeat nodeset="descendant::prov:Activity">
													<tr>
														<td>
															<xforms:output ref="format-dateTime(prov:atTime, '[M01]/[D01]/[Y0001]')"/>
														</td>
														<td>
															<xforms:output value="tokenize(prov:wasAssociatedWith/@rdf:resource, '/')[last()]"/>
														</td>
														<td>
															<xforms:output ref="dcterms:type"/>
															<xforms:group ref=".[dcterms:type = 'spreadsheet']">
																<xforms:trigger appearance="minimal">
																	<xforms:label>
																		<span class="glyphicon glyphicon-new-window"></span>
																	</xforms:label>
																	<xforms:load ev:event="DOMActivate" show="new" ref="prov:used/@rdf:resource"/>
																</xforms:trigger>
															</xforms:group>
														</td>
														<td>
															<xforms:group ref=".[position() = last()]">
																<xforms:group ref="dcterms:description">
																	<xforms:textarea ref=".">
																		<xforms:alert>Required</xforms:alert>
																	</xforms:textarea>
																	<xforms:select1 ref="@xml:lang">
																		<xforms:item>
																			<xforms:label>Select...</xforms:label>
																			<xforms:value/>
																		</xforms:item>
																		<xforms:itemset nodeset="instance('languages')/language">
																			<xforms:label ref="."/>
																			<xforms:value ref="@value"/>
																		</xforms:itemset>
																		<xforms:alert>Required</xforms:alert>
																	</xforms:select1>
																	<xforms:trigger appearance="minimal">
																		<xforms:dispatch target="delete-description-dialog" name="fr-show"
																			ev:event="DOMActivate"/>
																		<xforms:label>
																			<span class="glyphicon glyphicon-remove"></span>
																		</xforms:label>
																	</xforms:trigger>
																</xforms:group>
															</xforms:group>
															<xforms:group ref=".[not(position() = last())]">
																<xforms:output ref="dcterms:description"/>
															</xforms:group>
														</td>
													</tr>
												</xforms:repeat>
											</tbody>

										</table>

									</div>
								</xforms:group>
							</xforms:group>
						</xforms:case>
					</xforms:switch>

					<!--<fr:xforms-inspector/>-->
					<!--<xforms:group ref="instance('doc')/*[1]/dcterms:isReplacedBy">
							<div>
								<xforms:output ref="@rdf:resource">
									<xforms:label>Replaced By</xforms:label>
								</xforms:output>
							</div>
						</xforms:group>-->
				</div>
				<div class="col-md-2">
					<xforms:group ref="instance('doc')/*[1]">
						<xforms:var name="type" select="name()"/>
						<h3>Import</h3>
						<!-- import skos:prefLabels from wikidata for those languages that are not already in the RDF -->
						<xforms:group ref=".[not(skos:*[contains(@rdf:resource, 'wikidata')])]">
							<kerameikos:wikidata/>
						</xforms:group>
						<xforms:group ref=".[contains($type, 'kon:') or contains($type, 'foaf:') or $type='crm:E4_Period' or $type='crm:E57_Material']">
							<xforms:group ref=".[not(skos:exactMatch[contains(@rdf:resource, 'britishmuseum.org')])]">
								<kerameikos:bm/>
							</xforms:group>
						</xforms:group>
						<!-- import AAT URIs from Getty -->
						<xforms:group ref=".[contains($type, 'kon:') or $type='crm:E4_Period' or $type='crm:E57_Material' or $type='foaf:Person']">
							<kerameikos:getty/>
						</xforms:group>
						<!-- extract coordinates from Pleiades if there is a Pleiades URI in skos:exactMatch, but no geo:lat and geo:long -->
						<xforms:group ref=".[$type='crm:E53_Place']">
							<xforms:group ref=".[not(skos:exactMatch[contains(@rdf:resource, 'pleiades.stoa.org')])]">
								<kerameikos:pleiades/>
							</xforms:group>
						</xforms:group>
						<!-- query VIAF to add associated URIs -->
						<xforms:group ref=".[$type='foaf:Person' or $type='foaf:Organization' or $type='crm:E40_Legal_Body' or $type='foaf:Group']">
							<kerameikos:viaf/>
						</xforms:group>
					</xforms:group>
				</div>
			</div>
		</div>
		<!-- ***** DIALOGS ***** -->
		<fr:alert-dialog id="delete-description-dialog">
			<fr:label>Delete Description</fr:label>
			<fr:message>It isn't recommended to delete a description of provenance activity unless the edit is to fix a minor typo. Continue?</fr:message>
			<fr:positive-choice>
				<fr:label>Yes</fr:label>
				<xforms:action ev:event="DOMActivate">
					<xforms:delete nodeset="instance('doc')/descendant::prov:Activity[last()]/dcterms:description"/>
				</xforms:action>
			</fr:positive-choice>
			<fr:negative-choice>
				<fr:label>No</fr:label>
			</fr:negative-choice>
		</fr:alert-dialog>
		
		<xxforms:dialog id="broader-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Broader Concept</xforms:label>
			<div>
				<xforms:input ref="instance('control-instance')/atom-search"/>
				<xforms:trigger>
					<xforms:label>Search</xforms:label>
					<!-- delete current options in the instance and initiate new query -->
					<xforms:action ev:event="DOMActivate">
						<xforms:send submission="query-feed"/>
					</xforms:action>
				</xforms:trigger>
			</div>
			<div style="width:400px;">
				<xforms:group ref=".[count(instance('feed')//atom:entry) &gt; 0]">
					<h4>Results</h4>
					<div>
						<xforms:select1 ref="instance('control-instance')/atom-id" appearance="compact">
							<xforms:itemset nodeset="instance('feed')//atom:entry">
								<xforms:label ref="atom:title"/>
								<xforms:value ref="atom:id"/>
							</xforms:itemset>
							<xforms:action ev:event="xforms-value-changed">
								<xforms:setvalue ref="instance('control-instance')/atom-summary"
									value="instance('feed')//atom:entry[atom:id = instance('control-instance')/atom-id]/atom:summary"/>
							</xforms:action>
						</xforms:select1>
						<xforms:trigger>
							<xforms:label>Select</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]"
									origin="xforms:element('skos:broader', (xforms:attribute('rdf:resource', concat('http://kerameikos.org/id/', instance('control-instance')/atom-id)), ''))"/>
								
								<!-- insert crm:P89_falls_within to places for CIDOC-CRM compatibility -->
								<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]"
									origin="xforms:element('crm:P89_falls_within', (xforms:attribute('rdf:resource', concat('http://kerameikos.org/id/', instance('control-instance')/atom-id)), ''))"
									if="instance('control-instance')/type = 'crm:E53_Place'"/>
								
								<!-- insert dcterms:isPartOf if there is a crm:E53_Place -->
								<xforms:insert context="instance('doc')/geo:SpatialThing" nodeset="./child::node()[last()]"
									origin="xforms:element('dcterms:isPartOf, (xforms:attribute('rdf:resource', concat('http://kerameikos.org/id/', instance('control-instance')/atom-id, '#this')), ''))"/>
																
								<!-- blank atom search nodes and atom feed -->
								<xforms:delete nodeset="instance('feed')/*"/>
								<xforms:setvalue ref="instance('control-instance')/atom-search"/>
								<xforms:setvalue ref="instance('control-instance')/atom-id"/>
								<xforms:setvalue ref="instance('control-instance')/atom-summary"/>
								<xxforms:hide dialog="broader-dialog"/>
							</xforms:action>
						</xforms:trigger>
					</div>
					<div>
						<xforms:output ref="instance('control-instance')/atom-summary">
							<xforms:label>Definition</xforms:label>
						</xforms:output>
					</div>
				</xforms:group>
				<xforms:group ref=".[count(instance('feed')//atom:entry) = 0 and string(instance('feed')/atom:title)]">
					<h4>No results found.</h4>
				</xforms:group>
			</div>
		</xxforms:dialog>
		<xxforms:dialog id="organization-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Parent Workshop/Group</xforms:label>
			<div>
				<xforms:input ref="instance('control-instance')/atom-search"/>
				<xforms:trigger>
					<xforms:label>Search</xforms:label>
					<!-- delete current options in the instance and initiate new query -->
					<xforms:action ev:event="DOMActivate">
						<xforms:send submission="query-feed"/>
					</xforms:action>
				</xforms:trigger>
			</div>
			<div style="width:400px;">
				<xforms:group ref=".[count(instance('feed')//atom:entry) &gt; 0]">
					<h4>Results</h4>
					<div>
						<xforms:select1 ref="instance('control-instance')/atom-id" appearance="compact">
							<xforms:itemset nodeset="instance('feed')//atom:entry">
								<xforms:label ref="atom:title"/>
								<xforms:value ref="atom:id"/>
							</xforms:itemset>
							<xforms:action ev:event="xforms-value-changed">
								<xforms:setvalue ref="instance('control-instance')/atom-summary"
									value="instance('feed')//atom:entry[atom:id = instance('control-instance')/atom-id]/atom:summary"/>
							</xforms:action>
						</xforms:select1>
						<xforms:trigger>
							<xforms:label>Select</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<xforms:insert context="instance('doc')/org:Membership[position() = number(instance('control-instance')/membership-position)]"
									nodeset="./child::node()[last()]"
									origin="xforms:element('org:organization', (xforms:attribute('rdf:resource', concat('http://kerameikos.org/id/', instance('control-instance')/atom-id)), ''))"/>
								<!-- blank atom search nodes and atom feed -->
								<xforms:delete nodeset="instance('feed')/*"/>
								<xforms:setvalue ref="instance('control-instance')/atom-search"/>
								<xforms:setvalue ref="instance('control-instance')/atom-id"/>
								<xforms:setvalue ref="instance('control-instance')/atom-summary"/>
								<xxforms:hide dialog="organization-dialog"/>
							</xforms:action>
						</xforms:trigger>
					</div>
					<xforms:group ref=".[string-length(instance('control-instance')/atom-summary) &gt; 0]">
						<div>
							<xforms:output ref="instance('control-instance')/atom-summary">
								<xforms:label>Definition</xforms:label>
							</xforms:output>
							<xforms:trigger appearance="minimal">
								<xforms:label>
									<span class="glyphicon glyphicon-new-window"></span>
								</xforms:label>
								<xforms:load ev:event="DOMActivate" show="new" ref="concat('http://kerameikos.org/id/', instance('control-instance')/atom-id)"/>
							</xforms:trigger>
						</div>
					</xforms:group>
				</xforms:group>
				<xforms:group ref=".[count(instance('feed')//atom:entry) = 0 and string(instance('feed')/atom:title)]">
					<h4>No results found.</h4>
				</xforms:group>
			</div>
		</xxforms:dialog>
		<xxforms:dialog id="deprecate-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
			<xforms:label>Deprecate ID</xforms:label>
			<div>
				<p>Search for an existing ID to forward. By default, this ID is usually the same RDF class.</p>

				<div>
					<xforms:select1 ref="instance('control-instance')/atom-type">
						<xforms:label>Type</xforms:label>
						<xforms:itemset nodeset="instance('classes')/class">
							<xforms:label ref="label"/>
							<xforms:value ref="concat('&#x022;', type, '&#x022;')"/>
						</xforms:itemset>
					</xforms:select1>
				</div>

				<div>
					<xforms:input ref="instance('control-instance')/atom-search">
						<xforms:label>Keyword</xforms:label>
					</xforms:input>

					<xforms:trigger>
						<xforms:label>Search</xforms:label>
						<!-- delete current options in the instance and initiate new query -->
						<xforms:action ev:event="DOMActivate">
							<xforms:send submission="query-feed"/>
						</xforms:action>
					</xforms:trigger>
				</div>

			</div>
			<div style="width:400px;">
				<xforms:group ref=".[count(instance('feed')//atom:entry) &gt; 0]">
					<h4>Results</h4>
					<div>
						<xforms:select1 ref="instance('control-instance')/atom-id" appearance="compact">
							<xforms:itemset nodeset="instance('feed')//atom:entry[not(atom:id = instance('control-instance')/id)]">
								<xforms:label ref="atom:title"/>
								<xforms:value ref="atom:id"/>
							</xforms:itemset>
							<xforms:action ev:event="xforms-value-changed">
								<xforms:setvalue ref="instance('control-instance')/atom-summary"
									value="instance('feed')//atom:entry[atom:id = instance('control-instance')/atom-id]/atom:summary"/>
							</xforms:action>
						</xforms:select1>
						<xforms:trigger>
							<xforms:label>Select</xforms:label>
							<xforms:action ev:event="DOMActivate">
								<!-- delete all triples which are not skos:prefLabel and skos:definition -->
								<xforms:delete nodeset="instance('doc')/*[not(position() = 1)]"/>
								<xforms:delete nodeset="instance('doc')/*[1]/*[not(name()='skos:prefLabel') and not(name()='skos:definition')]"/>

								<!-- insert dcterms:isReplacedBy -->
								<xforms:insert context="instance('doc')/*[1]" nodeset="./child::node()[last()]"
									origin="xforms:element('dcterms:isReplacedBy', (xforms:attribute('rdf:resource', concat('http://kerameikos.org/id/', instance('control-instance')/atom-id)), ''))"/>

								<!-- blank atom search nodes and atom feed -->
								<xforms:delete nodeset="instance('feed')/*"/>
								<xforms:setvalue ref="instance('control-instance')/atom-search"/>
								<xforms:setvalue ref="instance('control-instance')/atom-id"/>
								<xforms:setvalue ref="instance('control-instance')/atom-summary"/>

								<!-- save file to the filesystem -->
								<xforms:setvalue ref="instance('save-config')/url"
									value="concat(instance('config')/data_path, '/id/',  instance('control-instance')/id, '.rdf')"/>
								<xforms:insert nodeset="instance('dump')"
									origin="xxforms:call-xpl('oxf:/apps/kerameikos/xpl/xforms/save-id.xpl', ('doc', 'configuration'), (instance('doc'), instance('save-config')), 'data')"/>

								<!-- delete graph from triplestore, then repost updates -->
								<xforms:setvalue ref="instance('sparqlUpdate')"
									value="replace(instance('sparqlUpdate-template'), 'URI', instance('doc')/*[1]/@rdf:about)"/>
								<xforms:send submission="delete-graph"/>
								<xforms:send submission="post-new"/>

								<!-- delete from Solr -->
								<xforms:setvalue ref="instance('deleteId')/id" value="instance('control-instance')/id"/>
								<xforms:send submission="delete-id-from-solr"/>
								<xxforms:hide dialog="deprecate-dialog"/>
							</xforms:action>
						</xforms:trigger>
					</div>
					<xforms:group ref=".[string-length(instance('control-instance')/atom-summary) &gt; 0]">
						<div>
							<xforms:output ref="instance('control-instance')/atom-summary">
								<xforms:label>Definition</xforms:label>
							</xforms:output>
							<xforms:trigger appearance="minimal">
								<xforms:label>
									<span class="glyphicon glyphicon-new-window"></span>
								</xforms:label>
								<xforms:action ev:event="DOMActivate">
									<xforms:load show="new" resource="{concat('http://kerameikos.org/id/', instance('control-instance')/atom-id)}"/>
								</xforms:action>
							</xforms:trigger>
						</div>
					</xforms:group>
				</xforms:group>
				<xforms:group ref=".[count(instance('feed')//atom:entry) = 0 and string(instance('feed')/atom:title)]">
					<h4>No results found.</h4>
				</xforms:group>
			</div>
		</xxforms:dialog>
		<!-- hidden values -->
		<div style="display:none">
			<xforms:input ref="instance('control-instance')/geo/hasFeature" id="geo-hasFeature"/>
			<xforms:output ref="instance('control-instance')/geo/type" id="geo-type-control"/>
			<xforms:output ref="instance('control-instance')/geo/lat" id="geo-lat"/>
			<xforms:output ref="instance('control-instance')/geo/long" id="geo-long"/>
			<xforms:output ref="instance('control-instance')/geo/geoJSON" id="geo-geoJSON"/>
			<xforms:input ref="instance('doc')/geo:SpatialThing/osgeo:asGeoJSON" id="geoJSON-input"/>
			<xforms:input ref="instance('doc')/geo:SpatialThing/geo:lat" id="lat-input"/>
			<xforms:input ref="instance('doc')/geo:SpatialThing/geo:long" id="long-input"/>
		</div>
	</body>
</html>
